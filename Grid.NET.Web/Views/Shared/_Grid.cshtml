@using Grid.NET.Infrastructure.Interfaces
@model Grid.NET.Infrastructure.Interfaces.IGrid

@if (Model == null) { return; }

<div>

</div>

<div class="list-table" id="@Model.Name" >
    @* Draw grid header *@
   
    <div class="table-header">
        <ul class="header">
           
                @RenderGridHeader()
           
        </ul>
    </div>
    <div class="table-results table-overflow">
        @RenderGridBody()
    </div>

</div>

@RenderGridFooter()



@helper RenderGridHeader()
{
    foreach (IColumn column in @Model.Columns)
    {
        <li>
            @column.Title
        </li>
    }
}

@helper RenderGridBody()
{
    if (!@Model.Data.Any())
    {
        <ul class="results">
            <li>
                @Model.EmptyGridText
            </li>
        </ul>
    }
    else
    {
        foreach (var customer in @Model.Data)
        {
            <ul class="results">
                @foreach (var propertyInfo in customer.GetType().GetProperties())
                {
                    <li>
                        @propertyInfo.GetValue(customer, null)
                    </li>
                }
            </ul>
        }
    }
}

@helper RenderGridFooter()
{

    if (@Model.IsPagingEnabled)
    {
        <div class="pagination-section">
            <ul>
                @for (int i = Model.Pagination.IndexStart; i <= Model.Pagination.IndexEnd; i++)
                {
                    if (Model.Pagination.CurrentPage == i)
                     {
                         <li class="easing pagination current">@i</li>
                     }
                    else
                    {
                        <li class="easing pagination">@i</li>
                    }
                }
            </ul>
        </div>
    }
}